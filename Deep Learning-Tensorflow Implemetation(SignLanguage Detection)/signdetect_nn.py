# -*- coding: utf-8 -*-
"""SignDetect_NN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14wPdzYZa_brCG7mU9ZkfYUcG17vGJBtL
"""

# Commented out IPython magic to ensure Python compatibility.
# %tensorflow_version 1.x
import tensorflow as tf
from tensorflow.python.framework import ops
import matplotlib.pyplot as plt
import numpy as np
import h5py, math
np.random.seed(1)

# Commented out IPython magic to ensure Python compatibility.
import sys
import os
sys.path.append('/content/drive/My Drive/Colab Notebooks/tensorflow')
# /content/drive/My Drive/Colab Notebooks/tensorflow/datasets
from tf_utils import *
# %matplotlib inline

def linear_function():
  np.random.seed(1)
  X = tf.constant(np.random.randn(3,1), name='X')
  W = tf.constant(np.random.randn(4,3), name='W')
  b = tf.constant(np.random.randn(4,1), name='b')
  Y = tf.add(tf.matmul(W,X),b)

  sess = tf.Session()
  result = sess.run(Y)
  sess.close()

  return result\
  
print( "result = \n" + str(linear_function()))

def sigmoid(z):
  x = tf.placeholder(tf.float32, name='x')
  sigmoid = tf.sigmoid(x)
  with tf.Session() as sess:
    result = sess.run(sigmoid, feed_dict={x:z})
  sess.close()
  return result 

print ("sigmoid(0) = " + str(sigmoid(0)))
print ("sigmoid(12) = " + str(sigmoid(12)))

def cost(logits, labels):
  z = tf.placeholder(tf.float32, name='z')
  y = tf.placeholder(tf.float32, name='y')
  cost = tf.nn.sigmoid_cross_entropy_with_logits(logits=z, labels=y)
  with tf.Session() as sess:
    cost = sess.run(cost, feed_dict={z:logits, y:labels})
  sess.close()
  return cost 

logits = np.array([0.2,0.4,0.7,0.9])
cost = cost(logits, np.array([0,0,1,1]))
print ("cost = " + str(cost))

def one_hot_matrix(labels, C):
  C = tf.constant(C, name='C')
  one_hot_matrix = tf.one_hot(labels, C, axis=0)
  with tf.Session() as sess:
    one_hot = sess.run(one_hot_matrix)
  sess.close()
  return one_hot   

labels = np.array([1,2,3,0,2,1])
one_hot = one_hot_matrix(labels, C = 4)
print ("one_hot = \n" + str(one_hot))

def ones(shape):
  ones = tf.ones(shape)
  with tf.Session() as sess:
    ones = sess.run(ones)
  sess.close()
  return ones

print ("ones = " + str(ones([3])))

X_train_orig, Y_train_orig, X_test_orig, Y_test_orig, classes = load_dataset()

index=1
plt.imshow(X_train_orig[index])
print ("y = " + str(np.squeeze(Y_train_orig[:, index])))

X_train_flatten = X_train_orig.reshape(X_train_orig.shape[0], -1).T
X_test_flatten = X_test_orig.reshape(X_test_orig.shape[0], -1).T

X_train = X_train_flatten/255.
X_test = X_test_flatten/255.

Y_train = convert_to_one_hot(Y_train_orig, 6)
Y_test = convert_to_one_hot(Y_test_orig, 6)

print ("number of training examples = " + str(X_train.shape[1]))
print ("number of test examples = " + str(X_test.shape[1]))
print ("X_train shape: " + str(X_train.shape))
print ("Y_train shape: " + str(Y_train.shape))
print ("X_test shape: " + str(X_test.shape))
print ("Y_test shape: " + str(Y_test.shape))

def create_placeholder(n_x, n_y):
  X = tf.placeholder(tf.float32,[n_x, None] , name='X')
  Y = tf.placeholder(tf.float32,[n_y, None] , name='Y')
  return X,Y

X,Y = create_placeholder(12288, 6)
print ("X = " + str(X))
print ("Y = " + str(Y))

def initialize_parameter():
  tf.set_random_seed(1)
  W1 = tf.get_variable("W1",[25,12288],initializer=tf.contrib.layers.xavier_initializer(seed=1))
  W2 = tf.get_variable("W2",[12,25],initializer=tf.contrib.layers.xavier_initializer(seed=1))
  W3 = tf.get_variable("W3",[6,12],initializer=tf.contrib.layers.xavier_initializer(seed=1))
  b1 = tf.get_variable("b1",[25,1],initializer=tf.zeros_initializer())
  b2 = tf.get_variable("b2",[12,1],initializer=tf.zeros_initializer())
  b3 = tf.get_variable("b3",[6,1],initializer=tf.zeros_initializer())
  parameters = {"W1": W1, "b1": b1, "W2": W2, "b2": b2, "W3": W3,"b3": b3}
    
  return parameters

tf.reset_default_graph()
with tf.Session() as sess:
    parameters = initialize_parameter()
    print("W1 = " + str(parameters["W1"]))
    print("b1 = " + str(parameters["b1"]))
    print("W2 = " + str(parameters["W2"]))
    print("b2 = " + str(parameters["b2"]))

def forward_propagation(X, parameters):
  W1 = parameters['W1']
  W2 = parameters['W2']
  W3 = parameters['W3']
  b1 = parameters['b1']
  b2 = parameters['b2']
  b3 = parameters['b3']
  
  Z1 = tf.add(tf.matmul(W1,X),b1)
  A1 = tf.nn.relu(Z1)
  Z2 = tf.add(tf.matmul(W2,A1),b2)
  A2 = tf.nn.relu(Z2)
  Z3 = tf.add(tf.matmul(W3,A2),b3)
  return Z3

tf.reset_default_graph()

with tf.Session() as sess:
    X, Y = create_placeholder(12288, 6)
    parameters = initialize_parameter()
    Z3 = forward_propagation(X, parameters)
    print("Z3 = " + str(Z3))

def compute_cost(Z3, Y):
  logits = tf.transpose(Z3)
  labels = tf.transpose(Y)
  cost = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits=logits, labels=labels))
  return cost


tf.reset_default_graph()
with tf.Session() as sess:
    X, Y = create_placeholder(12288, 6)
    parameters = initialize_parameter()
    Z3 = forward_propagation(X, parameters)
    cost = compute_cost(Z3, Y)
    print("cost = " + str(cost))

def model(X_train, Y_train, X_test, Y_test, learning_rate=0.0001, num_epochs=1500, minibatch_size=32, print_cost=True):
  ops.reset_default_graph()                         # to be able to rerun the model without overwriting tf variables
  tf.set_random_seed(1)                             # to keep consistent results
  seed = 3                                          # to keep consistent results
  (n_x, m) = X_train.shape                          # (n_x: input size, m : number of examples in the train set)
  n_y = Y_train.shape[0]                            # n_y : output size
  costs = [] 

  X,Y = create_placeholder(n_x, n_y)
  parameters = initialize_parameter()
  Z3 = forward_propagation(X, parameters)
  cost = compute_cost(Z3, Y)
  optimizer = tf.train.AdamOptimizer(learning_rate=learning_rate).minimize(cost)
  init = tf.global_variables_initializer()

  with tf.Session() as sess:
    sess.run(init)
    for epoch in range(num_epochs):
      epoch_cost = 0.                       # Defines a cost related to an epoch
      num_minibatches = int(m / minibatch_size) # number of minibatches of size minibatch_size in the train set
      seed = seed + 1
      minibatches = random_mini_batches(X_train, Y_train, minibatch_size, seed)
      for minibatch in minibatches:
        (minibatch_X, minibatch_Y) = minibatch
        _ , minibatch_cost = sess.run([optimizer,cost],feed_dict={X:minibatch_X, Y:minibatch_Y})
        epoch_cost += minibatch_cost / minibatch_size
      if print_cost == True and epoch % 100 == 0:
        print ("Cost after epoch %i: %f" % (epoch, epoch_cost))
      if print_cost == True and epoch % 5 == 0:
        costs.append(epoch_cost)
    plt.plot(np.squeeze(costs))
    plt.ylabel('cost')
    plt.xlabel('iterations (per fives)')
    plt.title("Learning rate =" + str(learning_rate))
    plt.show()
    parameters = sess.run(parameters)
    print ("Parameters have been trained!")
    correct_prediction = tf.equal(tf.argmax(Z3), tf.argmax(Y))
    accuracy = tf.reduce_mean(tf.cast(correct_prediction, "float"))
    print ("Train Accuracy:", accuracy.eval({X: X_train, Y: Y_train}))
    print ("Test Accuracy:", accuracy.eval({X: X_test, Y: Y_test}))

    return parameters

parameters = model(X_train, Y_train, X_test, Y_test)

import cv2 

my_image = "1.PNG"
fname = "/content/drive/My Drive/Colab Notebooks/tensorflow/testimages/" + my_image

image = np.array(cv2.imread(fname))
image = image/255.
my_image = np.array(resize(image, (64,64)).reshape((1, 64*64*3)).T)
my_image_prediction = predict(my_image, parameters)

plt.imshow(image)
print("Your algorithm predicts: y = " + str(np.squeeze(my_image_prediction)))



